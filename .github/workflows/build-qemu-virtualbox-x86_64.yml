name: build-qemu-virtualbox-x86_64

on:
  workflow_dispatch:
      inputs:

        # Available builds under qemu-kvm:

        #  qemu.almalinux-8-gencloud-x86_64             output-almalinux-8-gencloud-x86_64/AlmaLinux-8-GenericCloud-8.10-20250128.x86_64.qcow2
        #  qemu.almalinux-9-gencloud-x86_64             output-almalinux-9-gencloud-x86_64/AlmaLinux-9-GenericCloud-9.5-20250128.x86_64.qcow2
        #  qemu.almalinux_kitten_10_gencloud_x86_64     output-almalinux_kitten_10_gencloud_x86_64/AlmaLinux-Kitten-GenericCloud-10-20250129.0.x86_64.qcow2
        #  qemu.almalinux_kitten_10_gencloud_x86_64_v2  output-almalinux_kitten_10_gencloud_x86_64_v2/AlmaLinux-Kitten-GenericCloud-10-20250129.0.x86_64_v2.qcow2

        #  qemu.almalinux-8-azure-x86_64          output-almalinux-8-azure-x86_64/AlmaLinux-8-Azure-8.10-20250128.x86_64.raw
        #  qemu.almalinux-9-azure-x86_64          output-almalinux-9-azure-x86_64/AlmaLinux-9-Azure-9.5-20250128.x86_64.raw
        #  qemu.almalinux_kitten_10_azure_x86_64  output-almalinux_kitten_10_azure_x86_64/AlmaLinux-Kitten-Azure-10-20250129.0.x86_64.raw

        #  qemu.almalinux-8                                   AlmaLinux-8-Vagrant-8.10-20250204.x86_64.libvirt.box
        #  qemu.almalinux-9                                   AlmaLinux-9-Vagrant-libvirt-9.5-20250201.x86_64.box
        #  qemu.almalinux_kitten_10_vagrant_libvirt_x86_64    AlmaLinux-Kitten-Vagrant-libvirt-10-20250201.0.x86_64.box
        #  qemu.almalinux_kitten_10_vagrant_libvirt_x86_64_v2 AlmaLinux-Kitten-Vagrant-libvirt-10-20250201.0.x86_64_v2.box

        #  qemu.almalinux-8-opennebula-x86_64                 output-almalinux-8-opennebula-x86_64/AlmaLinux-8-OpenNebula-8.10-20250129.x86_64.qcow2
        #  qemu.almalinux-9-opennebula-x86_64                 output-almalinux-9-opennebula-x86_64/AlmaLinux-9-OpenNebula-9.5-20250129.x86_64.qcow2
        #  qemu.almalinux_kitten_10_opennebula_x86_64         output-almalinux_kitten_10_opennebula_x86_64/AlmaLinux-Kitten-OpenNebula-10-20250129.0.x86_64.qcow2
        #  qemu.almalinux_kitten_10_opennebula_x86_64_v2      output-almalinux_kitten_10_opennebula_x86_64_v2/AlmaLinux-Kitten-OpenNebula-10-20250129.0.x86_64_v2.qcow2

        #  qemu.almalinux-8-oci-x86_64            output-almalinux-8-oci-x86_64/AlmaLinux-8-OCI-8.10-20250129.x86_64.qcow2
        #  qemu.almalinux-9-oci-x86_64            output-almalinux-9-oci-x86_64/AlmaLinux-8-OCI-9.5-20250129.x86_64.qcow2

        #  qemu.almalinux-8-digitalocean-x86_64   output-almalinux-8-digitalocean-x86_64/AlmaLinux-9-DigitalOcean-8.10-20250212.x86_64.qcow2
        #  qemu.almalinux-9-digitalocean-x86_64   output-almalinux-9-digitalocean-x86_64/AlmaLinux-9-DigitalOcean-9.5-20250212.x86_64.qcow2


        # Available builds under VirtualBox:

        #  virtualbox-iso.almalinux-8             AlmaLinux-9-Vagrant-virtualbox-8.10-20250201.x86_64.box
        #  virtualbox-iso.almalinux-9             AlmaLinux-9-Vagrant-virtualbox-9.5-20250201.x86_64.box

        # Available builds under VMware

        #  vmware-iso.almalinux-8                 AlmaLinux-8-Vagrant-8.10-20250213.x86_64.vmware.box
        #  vmware-iso.almalinux-9                 AlmaLinux-9-Vagrant-vmware-9.5-20250213.x86_64.box

        version_major:
          description: 'AlmaLinux major version'
          required: true
          default: '9'
          type: choice
          options:
            - 10-kitten
            - 10
            - 9
            - 8

        type:
          description: 'Image type'
          required: true
          default: 'azure'
          type: choice
          options:
            - azure
            - gencloud
            - vagrant_libvirt
            - vagrant_virtualbox
            - vagrant_vmware
            - opennebula
            - oci
            - digitalocean        # TODO: require data to work with the cloud, such as: bucket, access key, secret key, etc.

        store_as_artifact:
          description: "Store images to the workflow Artifacts"
          required: true
          type: boolean
          default: false

        upload_to_s3:
          description: "Upload to S3 Bucket"
          required: true
          type: boolean
          default: false

        vagrant_publish:
          description: "Publish to Vagrant Cloud (vagrant_* types only)"
          required: true
          type: boolean
          default: false

        notify_mattermost:
          description: "Send notification to Mattermost"
          required: true
          type: boolean
          default: false

jobs:
  build-images:
    name: ${{ matrix.variant }} ${{ inputs.type }} image
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        variant: ${{ fromJSON(format('["{0}"]', ( inputs.version_major == '10-kitten' && '10-kitten", "10-kitten-x86_64_v2' || ( inputs.version_major == '10' && '10", "10-x86_64_v2' || inputs.version_major ) ) )) }}
        type: ${{ fromJSON(format('["{0}"]', inputs.type )) }}
        exclude:
          - variant: '10'
          - variant: '10-x86_64_v2'
          - type: 'azure'
            variant: '10-kitten-x86_64_v2'
          - type: 'oci'
            variant: '10'
          - type: 'oci'
            variant: '10-x86_64_v2'
          - type: 'oci'
            variant: '10-kitten'
          - type: 'oci'
            variant: '10-kitten-x86_64_v2'
          - type: 'vagrant_virtualbox'
            variant: '10-kitten'
          - type: 'vagrant_virtualbox'
            variant: '10-kitten-x86_64_v2'
          - type: 'digitalocean'
            variant: '10-kitten'
          - type: 'digitalocean'
            variant: '10-kitten-x86_64_v2'

    steps:
    - uses: actions/checkout@v4

    - name: Update system
      run: |
        sudo apt-get -y update

    - name: install extra packages
      run: |
        sudo apt-get -y install ovmf rpm

    - name: Prepare staff
      run: |
        # Packer options
        packer_opts="-var ovmf_code=/usr/share/OVMF/OVMF_CODE_4M.fd -var ovmf_vars=/usr/share/OVMF/OVMF_VARS_4M.fd"

        # -var qemu_binary="/usr/libexec/qemu-kvm" # to override qemu binary on Red Hat based systems
        # -var vagrant_ssh_username="root" # to override default vagrant user

        # Ubuntu 24.04 ( /usr/share/qemu/firmware/60-edk2-x86_64.json ):
        # UEFI firmware for x86_64, without Secure Boot, optional SMM, empty varstore
        # -var ovmf_code="/usr/share/OVMF/OVMF_CODE_4M.fd" \
        # -var ovmf_vars="/usr/share/OVMF/OVMF_VARS_4M.fd" \

        # Ubuntu 24.04 ( /usr/share/qemu/firmware/50-edk2-x86_64-secure.json ):
        # UEFI firmware for x86_64, with Secure Boot, required SMM, empty varstore
        # -var ovmf_code="/usr/share/OVMF/OVMF_CODE_4M.secboot.fd" \
        # -var ovmf_vars="/usr/share/OVMF/OVMF_VARS_4M.fd" \

        # Ubuntu 24.04 ( /usr/share/qemu/firmware/40-edk2-x86_64-secure-enrolled.json ):
        # UEFI firmware for x86_64, with Secure Boot, required SMM, SB enabled, MS certs enrolled
        # -var ovmf_code="/usr/share/OVMF/OVMF_CODE_4M.ms.fd" \
        # -var ovmf_vars="/usr/share/OVMF/OVMF_VARS_4M.ms.fd" \

        # Ubuntu release codename
        ubuntu_codename=$(lsb_release -cs)

        # date+time stamp, YYYYMMDDhhmmss
        time_stamp=$(date -u '+%Y%m%d%H%M%S')

        # date stamp, YYYYMMDD
        date_stamp=$(date -u '+%Y%m%d')

        # Image type e.g. Azure, Vagrant Libvirt, ...
        image_type=${{ inputs.type }}
        image_type=${image_type//_/ }
        image_type=${image_type^}

        # Release version
        if [[ ${{ inputs.version_major }} != *'kitten'* ]]; then
          almalinux_release=https://repo.almalinux.org/almalinux/almalinux-release-latest-${{ inputs.version_major }}.x86_64.rpm
          # TODO: remove when AlmaLinux 10.0 is released
          [ "${{ inputs.version_major }}" = "10" ] && almalinux_release=https://vault.almalinux.org/almalinux-release-latest-10-beta.x86_64.rpm
          release=$(rpm -q --qf="%{VERSION}\n" ${almalinux_release} 2>/dev/null)
        fi

        # Packer source for image set in .pkr.hcl configs, e.g. qemu.almalinux-9-gencloud-x86_64, qemu.almalinux-9-azure-x86_64, ...
        packer_source=qemu.almalinux-${{ matrix.variant }}-${{ inputs.type }}-x86_64

        # Mask to locate output image file
        output_mask=output-almalinux-${{ matrix.variant }}-${{ inputs.type }}-x86_64/AlmaLinux-${{ inputs.version_major }}-*.x86_64.qcow2

        # AWS S3 path to store images
        aws_s3_path=images/${{ matrix.variant }}/${release}/${{ inputs.type }}/${time_stamp}

        # Overriding packer source, image mask and S3 path where necessary
        case "${{ inputs.type }}${{ matrix.variant }}" in
          azure8|azure9|azure10)
            output_mask=output-almalinux-${{ matrix.variant }}-${{ inputs.type }}-x86_64/AlmaLinux-${{ inputs.version_major }}-*.x86_64.raw
            ;;
          digitalocean*)
            output_mask=output-almalinux-${{ matrix.variant }}-${{ inputs.type }}-x86_64/AlmaLinux-${{ inputs.version_major }}-DigitalOcean-*.x86_64.qcow2
            # TODO: Exclude digitalocean-import post-processor because of lack of DigitalOcean API token
            # Operating System Version test fails for almaLinux 8.10. Need to refresh from the official repository
            # https://github.com/digitalocean/marketplace-partners/blob/master/scripts/99-img-check.sh
            packer_opts="${packer_opts} -except=digitalocean-import"
            # TODO: Remove pvgrub_config role from ansible playbook as it is not implemented ???
            sed -i '/role: pvgrub_config/d' ansible/roles/digitalocean_guest/meta/main.yml
            ;;
          vagrant_libvirt8)
            packer_source=qemu.almalinux-${{ matrix.variant }}
            output_mask=AlmaLinux-8-Vagrant-*.x86_64.libvirt.box
            aws_s3_path=images/${{ matrix.variant }}/${release}/vagrant/${time_stamp}
            ;;
          vagrant_libvirt9|vagrant_libvirt10)
            packer_source=qemu.almalinux-${{ matrix.variant }}
            output_mask=AlmaLinux-${{ matrix.variant }}-Vagrant-libvirt-*.x86_64.box
            aws_s3_path=images/${{ matrix.variant }}/${release}/vagrant/${time_stamp}
            ;;
          vagrant_virtualbox8)
            packer_source=virtualbox-iso.almalinux-${{ matrix.variant }}
            output_mask=AlmaLinux-8-Vagrant-*.x86_64.virtualbox.box
            aws_s3_path=images/${{ matrix.variant }}/${release}/vagrant/${time_stamp}
            ;;
          vagrant_virtualbox9|vagrant_virtualbox10)
            packer_source=virtualbox-iso.almalinux-${{ matrix.variant }}
            output_mask=AlmaLinux-${{ matrix.variant }}-Vagrant-virtualbox-*.x86_64.box
            aws_s3_path=images/${{ matrix.variant }}/${release}/vagrant/${time_stamp}
            ;;
          azure*kitten*)
            packer_source=qemu.almalinux_kitten_10_${{ inputs.type }}_x86_64
            [[ ${{ matrix.variant }} == *"v2"* ]] && packer_source="${packer_source}_v2"
            output_mask=output-almalinux_kitten_10_${{ inputs.type }}_x86_64/AlmaLinux-Kitten-*.x86_64*.raw
            aws_s3_path=images/kitten/10/${{ inputs.type }}/${time_stamp}
            ;;
          vagrant_vmware8)
            packer_source=vmware-iso.almalinux-${{ matrix.variant }}
            packer_opts=
            output_mask=AlmaLinux-8-Vagrant-*.x86_64.vmware.box
            aws_s3_path=images/${{ matrix.variant }}/${release}/vagrant/${time_stamp}
            ;;
          vagrant_vmware9)
            packer_source=vmware-iso.almalinux-${{ matrix.variant }}
            packer_opts=
            output_mask=AlmaLinux-9-Vagrant-vmware-*.x86_64.box
            aws_s3_path=images/${{ matrix.variant }}/${release}/vagrant/${time_stamp}
            ;;
          vagrant_libvirt*kitten*)
            packer_source=qemu.almalinux_kitten_10_${{ inputs.type }}_x86_64
            [[ ${{ matrix.variant }} == *"v2"* ]] && packer_source="${packer_source}_v2"
            output_mask=AlmaLinux-Kitten-Vagrant-libvirt-10-*.x86_64*.box
            aws_s3_path=images/kitten/10/vagrant/${time_stamp}
            ;;
          vagrant_virtualbox*kitten*)
            packer_source=qemu.almalinux_kitten_10_${{ inputs.type }}_x86_64
            [[ ${{ matrix.variant }} == *"v2"* ]] && packer_source="${packer_source}_v2"
            output_mask=AlmaLinux-Kitten-Vagrant-virtualbox-10-*.x86_64*.box
            aws_s3_path=images/kitten/10/vagrant/${time_stamp}
            ;;
          *kitten*)
            packer_source=qemu.almalinux_kitten_10_${{ inputs.type }}_x86_64
            [[ ${{ matrix.variant }} == *"v2"* ]] && packer_source="${packer_source}_v2"
            output_mask=output-almalinux_kitten_10_${{ inputs.type }}_x86_64/AlmaLinux-Kitten-*.x86_64*.qcow2
            aws_s3_path=images/kitten/10/${{ inputs.type }}/${time_stamp}
            ;;
        esac

        # case ${{ inputs.type }} in
        #   azure)
        #     output_mask=output-almalinux-${{ matrix.variant }}-${{ inputs.type }}-x86_64/AlmaLinux-${{ inputs.version_major }}-*.x86_64.raw
        #     ;;
        #   digitalocean*)
        #      output_mask=output-almalinux-${{ matrix.variant }}-${{ inputs.type }}-x86_64/AlmaLinux-${{ inputs.version_major }}-DigitalOcean-*.x86_64.qcow2
        #      # TODO: Exclude digitalocean-import post-processor because of lack of DigitalOcean API token
        #      # Operating System Version test fails for almaLinux 8.10. Need to refresh from the official repository
        #      # https://github.com/digitalocean/marketplace-partners/blob/master/scripts/99-img-check.sh
        #      packer_opts="${packer_opts} -except=digitalocean-import"
        #      # TODO: Remove pvgrub_config role from ansible playbook as it is not implemented ???
        #      sed -i '/role: pvgrub_config/d' ansible/roles/digitalocean_guest/meta/main.yml
        #     ;;
        #   vagrant_libvirt)
        #     packer_source=qemu.almalinux-${{ matrix.variant }}
        #     output_mask=AlmaLinux-${{ matrix.variant }}-Vagrant-libvirt-*.x86_64.box
        #     [ "${{ matrix.variant }}" = "8" ] && output_mask=AlmaLinux-8-Vagrant-*.x86_64.libvirt.box
        #     aws_s3_path=images/${{ matrix.variant }}/${release}/vagrant/${time_stamp}
        #     ;;
        #   vagrant_virtualbox)
        #     packer_source=virtualbox-iso.almalinux-${{ matrix.variant }}
        #     output_mask=AlmaLinux-${{ matrix.variant }}-Vagrant-virtualbox-*.x86_64.box
        #     [ "${{ matrix.variant }}" = "8" ] && output_mask=AlmaLinux-8-Vagrant-*.x86_64.virtualbox.box
        #     aws_s3_path=images/${{ matrix.variant }}/${release}/vagrant/${time_stamp}
        #     ;;
        # esac

        # case ${{ matrix.variant }} in
        #   *kitten*)
        #     packer_source=qemu.almalinux_kitten_10_${{ inputs.type }}_x86_64
        #     [[ ${{ matrix.variant }} == *"v2"* ]] && packer_source="${packer_source}_v2"

        #     output_mask=output-almalinux_kitten_10_${{ inputs.type }}_x86_64/AlmaLinux-Kitten-*.x86_64*.qcow2
        #     [ ${{ inputs.type }} == 'azure' ] && output_mask=output-almalinux_kitten_10_${{ inputs.type }}_x86_64/AlmaLinux-Kitten-*.x86_64*.raw
        #     [ ${{ inputs.type }} == 'vagrant_libvirt' ] && output_mask=AlmaLinux-Kitten-Vagrant-libvirt-10-*.x86_64*.box
        #     [ ${{ inputs.type }} == 'vagrant_virtualbox' ] && output_mask=AlmaLinux-Kitten-Vagrant-virtualbox-10-*.x86_64*.box

        #     aws_s3_path=images/kitten/10/${{ inputs.type }}/${time_stamp}
        #     [[ ${{ inputs.type }} == *"vagrant"* ]] && aws_s3_path=images/kitten/10/vagrant/${time_stamp}
        #     ;;
        # esac

        echo "PACKER_OPTS=${packer_opts}" >> $GITHUB_ENV
        echo "UBUNTU_CODENAME=${ubuntu_codename}" >> $GITHUB_ENV
        echo "TIME_STAMP=${time_stamp}" >> $GITHUB_ENV
        echo "DATE_STAMP=${date_stamp}" >> $GITHUB_ENV
        echo "IMAGE_TYPE=${image_type}" >> $GITHUB_ENV
        echo "RELEASE=${release}" >> "$GITHUB_ENV"
        echo "packer_source=${packer_source}" >> $GITHUB_ENV
        echo "output_mask=${output_mask}" >> $GITHUB_ENV
        echo "AWS_S3_PATH=${aws_s3_path}" >> $GITHUB_ENV

    - name: Install KVM
      if: inputs.type != 'vagrant_virtualbox' && inputs.type != 'vagrant_vmware'
      run: |
        sudo apt-get -y install qemu-kvm
        sudo adduser "$(id -un)" kvm

    - name: Check nested virtualization support
      if: inputs.type != 'vagrant_virtualbox' && inputs.type != 'vagrant_vmware'
      run: |
        echo "[Debug] vmx|svm CPU flags:"
        grep -E '(vmx|svm)' /proc/cpuinfo
        echo "[Debug] KVM modules:"
        sudo lsmod | grep kvm
        echo "[Debug] Nested virtualization support:"
        sudo cat /sys/module/kvm_amd/parameters/nested

    - name: Enable KVM group perms
      if: inputs.type != 'vagrant_virtualbox' && inputs.type != 'vagrant_vmware'
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm

    - name: Install virtualBox from its repository
      if: inputs.type == 'vagrant_virtualbox'
      uses: myci-actions/add-deb-repo@10
      with:
        repo: deb [arch=amd64] https://download.virtualbox.org/virtualbox/debian ${{ env.UBUNTU_CODENAME }} contrib
        repo-name: virtualbox
        keys-asc: https://www.virtualbox.org/download/oracle_vbox_2016.asc
        update: true
        install: virtualbox-7.1

    # - name: Add VirtualBox repository
    #   if: inputs.type == 'vagrant_virtualbox'
    #   run: |
    #     wget -O - https://www.virtualbox.org/download/oracle_vbox_2016.asc | sudo gpg --dearmor -o /usr/share/keyrings/oracle-virtualbox-2016.gpg
    #     echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/oracle-virtualbox-2016.gpg] https://download.virtualbox.org/virtualbox/debian $(lsb_release -cs) contrib" | sudo tee /etc/apt/sources.list.d/virtualbox.list
    #     sudo apt-get -y update

    # - name: Install VirtualBox
    #   if: inputs.type == 'vagrant_virtualbox'
    #   run: |
    #     sudo apt-get -y install virtualbox-7.1
    #     # virtualbox-guest-additions-iso

    - name: Install VMware
      if: inputs.type == 'vagrant_vmware'
      run: |
        cat <<'EOF'>./vmware_packer.sh
        cd /mnt
        echo "DOWNLOAD VMWARE ..." && sleep 5
        export ws_version=17.6.2
        export ws_build=24409262
        wget https://softwareupdate.vmware.com/cds/vmw-desktop/ws/${ws_version}/${ws_build}/linux/core/VMware-Workstation-${ws_version}-${ws_build}.x86_64.bundle.tar
        tar xf VMware-Workstation-17.6.2-24409262.x86_64.bundle.tar
        rm -f VMware-Workstation-17.6.2-24409262.x86_64.bundle.tar
        chmod +x VMware-Workstation-17.6.2-24409262.x86_64.bundle
        echo "INSTALL NEED LIBRARIES ..." && sleep 5
        apt-get -y install build-essential linux-headers-generic
        apt-get -y install libpcsclite1 libxcb-render0 libxcb-shm0 libxi6 libxinerama1 libxcursor1 libxtst6 libxml2-dev libc6-dev pcscd libpulse0 libasound2t64
        echo "INSTALL VMWARE ..." && sleep 5
        ./VMware-Workstation-17.6.2-24409262.x86_64.bundle --console --eulas-agreed --required
        echo "INSTALL PACKER ..." && sleep 5
        wget -O - https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
        apt-get -y update
        apt-get -y install packer ansible git
        git clone https://github.com/yuravk/cloud-images.git
        cd cloud-images/
        echo "BUILD IMAGE ..." && sleep 5
        packer init -upgrade .
        packer build -only=vmware-iso.almalinux-9 .
        EOF
        chmod +x vmware_packer.sh
        sudo ./vmware_packer.sh

        # # VMware Workstation versio and build number
        # ws_version=17.6.2 # 16.2.5 # 17.6.2
        # ws_build=24409262 # 20904516 # 24409262

        # sudo apt-get -y install build-essential linux-headers-generic
        # sudo apt-get -y install libpcsclite1 libxcb-render0 libxcb-shm0 libxi6 libxinerama1 libxcursor1 libxtst6 libxml2-dev libc6-dev pcscd libpulse0 libasound2t64
        # # sudo apt -y install tasksel dialog
        # # sudo tasksel install kde-desktop
        # # sudo systemctl start sddm

        # wget https://softwareupdate.vmware.com/cds/vmw-desktop/ws/${ws_version}/${ws_build}/linux/core/VMware-Workstation-${ws_version}-${ws_build}.x86_64.bundle.tar
        # tar xf VMware-Workstation-${ws_version}-${ws_build}.x86_64.bundle.tar && rm -f VMware-Workstation-${ws_version}-${ws_build}.x86_64.bundle.tar
        # chmod +x VMware-Workstation-${ws_version}-${ws_build}.x86_64.bundle
        # sudo sh -c "./VMware-Workstation-${ws_version}-${ws_build}.x86_64.bundle --console --eulas-agreed --required"
        # # sudo vmware-modconfig --console --install-all # TODO: ???

    - name: Install packer from Hashicorp repository
      uses: myci-actions/add-deb-repo@10
      with:
        repo: deb [arch=amd64] https://apt.releases.hashicorp.com ${{ env.UBUNTU_CODENAME }} main
        repo-name: hashicorp
        keys-asc: https://apt.releases.hashicorp.com/gpg
        update: true
        install: packer

    # - name: Add Hashicorp repository
    #   run: |
    #     wget -O - https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
    #     echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
    #     sudo apt-get -y update

    # - name: Install packer
    #   run: |
    #     sudo apt-get -y install packer

    - name: Install ansible
      run: sudo apt-get -y install ansible

    # - name: Initialize packer
    #   uses: hashicorp/packer-github-actions@master
    #   with:
    #     command: init
    #     arguments: "-upgrade"
    #     target: .

    # - name: Build ${{ inputs.type }} image
    #   uses: hashicorp/packer-github-actions@master
    #   with:
    #     command: build
    #     arguments: "-var ovmf_code=/usr/share/OVMF/OVMF_CODE_4M.fd -var ovmf_vars=/usr/share/OVMF/OVMF_VARS_4M.fd -only=${{ env.packer_source }}"
    #     target: .
    #   env:
    #     PACKER_LOG: 1

    - name: Setup tmate session
      uses: mxschmitt/action-tmate@v3
      if: ${{ failure() }}
      with:
        detached: true

    - name: Initialize packer
      run: sudo packer init -upgrade .

    - name: Build ${{ inputs.type }} image
      run: |
        sudo sh -c "PACKER_LOG=1 packer build ${{ env.PACKER_OPTS }} -only=${{ env.packer_source }} ."

    - name: Locate image file, generate checksum
      run: |
        image_file=$(ls -1 ${{ env.output_mask }} | head -n 1)
        [ "x${image_file}" = "x" ] && false
        cd $(dirname ${image_file})
        sudo sh -c "sha256sum $(basename ${image_file}) > $(basename ${image_file}).sha256sum"

        echo "IMAGE_FILE=${image_file}" >> $GITHUB_ENV
        echo "IMAGE_NAME=$(basename ${image_file})" >> $GITHUB_ENV

    - uses: actions/upload-artifact@v4
      name: Store image as artifact
      id: image-artifact
      if: inputs.store_as_artifact
      with:
        compression-level: 1
        name: ${{ env.IMAGE_NAME }}
        path: ${{ env.IMAGE_FILE }}

    - uses: actions/upload-artifact@v4
      name: Store checksum as artifact
      id: checksum-artifact
      if: inputs.store_as_artifact
      with:
        compression-level: 1
        name: ${{ env.IMAGE_NAME }}.sha256sum
        path: ${{ env.IMAGE_FILE }}.sha256sum

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4.0.2
      if: inputs.upload_to_s3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Publish to S3 Bucket and put object tagging with aws CLI
      if: inputs.upload_to_s3
      run: |
        cd $(dirname ${{ env.IMAGE_FILE }})
        for object in ${{ env.IMAGE_NAME }} ${{ env.IMAGE_NAME }}.sha256sum; do
          aws s3 cp ${object} s3://${{ vars.AWS_S3_BUCKET }}/${{ env.AWS_S3_PATH }}/
          aws s3api put-object-tagging --bucket ${{ vars.AWS_S3_BUCKET }} --key ${{ env.AWS_S3_PATH }}/${object} --tagging 'TagSet={Key=public,Value=yes}'
        done

    - name: Put S3 Bucket download URLs
      if: inputs.upload_to_s3
      uses: actions/github-script@v7
      with:
        result-encoding: string
        script: |
          core.summary
              .addHeading('S3 Bucket download URLs', '4')
              .addLink('${{ env.IMAGE_NAME }}.sha256sum', 'https://${{ vars.AWS_S3_BUCKET }}.s3-accelerate.dualstack.amazonaws.com/${{ env.AWS_S3_PATH }}/${{ env.IMAGE_NAME }}.sha256sum')
              .addBreak()
              .addLink('${{ env.IMAGE_NAME }}', 'https://${{ vars.AWS_S3_BUCKET }}.s3-accelerate.dualstack.amazonaws.com/${{ env.AWS_S3_PATH }}/${{ env.IMAGE_NAME }}')
              .write()

    - name: Send notification to Mattermost (Artifacts)
      uses: mattermost/action-mattermost-notify@master
      if: ${{ inputs.store_as_artifact == 'true' && inputs.notify_mattermost == 'true' && inputs.upload_to_s3 == 'false' }}
      with:
        MATTERMOST_WEBHOOK_URL: ${{ secrets.MATTERMOST_WEBHOOK_URL }}
        MATTERMOST_CHANNEL: ${{ secrets.MATTERMOST_CHANNEL }}
        MATTERMOST_USERNAME: ${{ github.triggering_actor }}
        TEXT: |
          **AlmaLinux OS ${{ env.RELEASE }}} x86_64 Cloud Images** `${{ env.TIME_STAMP }}` generated by the GitHub [Action](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

          :almalinux: **${{ env.IMAGE_TYPE }}**

          - CHECKSUM(SHA256) [zipped]: [${{ env.IMAGE_NAME }}.sha256sum](${{ steps.checksum-artifact.outputs.artifact-url }})

          - Image [zipped]: [${{ env.IMAGE_NAME }}](${{ steps.image-artifact.outputs.artifact-url }})

    - name: Send notification to Mattermost (AWS S3 links)
      uses: mattermost/action-mattermost-notify@master
      if: ${{ inputs.upload_to_s3 == 'true' && inputs.notify_mattermost == 'true' }}
      with:
        MATTERMOST_WEBHOOK_URL: ${{ secrets.MATTERMOST_WEBHOOK_URL }}
        MATTERMOST_CHANNEL: ${{ secrets.MATTERMOST_CHANNEL }}
        MATTERMOST_USERNAME: ${{ github.triggering_actor }}
        TEXT: |
          **AlmaLinux OS ${{ env.RELEASE }}} x86_64 Cloud Images** `${{ env.TIME_STAMP }}` generated by the GitHub [Action](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

          :almalinux: **${{ env.IMAGE_TYPE }}**

          - CHECKSUM(SHA256): [${{ env.IMAGE_NAME }}.sha256sum](https://${{ vars.AWS_S3_BUCKET }}.s3-accelerate.dualstack.amazonaws.com/${{ env.AWS_S3_PATH }}/${{ env.IMAGE_NAME }}.sha256sum)

          - Image: [${{ env.IMAGE_NAME }}](https://${{ vars.AWS_S3_BUCKET }}.s3-accelerate.dualstack.amazonaws.com/${{ env.AWS_S3_PATH }}/${{ env.IMAGE_NAME }})

    - name: Vagrant cloud publish
      if: inputs.vagrant_publish && ( inputs.type == 'vagrant_libvirt' || inputs.type == 'vagrant_virtualbox' )
      run: |
        sudo apt-get -y install hcp vagrant
        hcp auth login --client-id=${{ secrets.HCP_CLIENT_ID}} --client-secret=${{ secrets.HCP_CLIENT_SECRET }}

        cloud_token="$(sudo -E hcp auth print-access-token)"
        box_name=almalinux-${{ matrix.variant }} # TODO: should be just major version for AlmaLinux organization
        provider=${{ inputs.type }}; provider=${provider#"vagrant_"}
        arch=amd64
        checksum="$(sha256sum ${{ env.IMAGE_FILE }} | awk '{ print $1 }')"
        echo "[Debug] provider=${provider} box_name=${box_name} checksum=${checksum} IMAGE_FILE=${{ env.IMAGE_FILE }}"

        export VAGRANT_CLOUD_TOKEN="$(sudo -E hcp auth print-access-token)"
        vagrant cloud publish \
          -C sha256 \
          -c ${checksum} \
          --release \
          -a ${arch} \
          --direct-upload \
          --debug \
          -f \
          "${{ vars.HCP_ORG }}/${box_name}" \
          ${{ env.RELEASE }}.${{ env.DATE_STAMP }} \
          ${provider} \
          ${{ env.IMAGE_FILE }}

        echo "VAGRANT_BOX_NAME=${box_name}" >> $GITHUB_ENV
        echo "VAGRANT_PROVIDER=${provider}" >> $GITHUB_ENV

    - name: Put Hashicorp Vagrant registry URL
      if: inputs.vagrant_publish && ( inputs.type == 'vagrant_libvirt' || inputs.type == 'vagrant_virtualbox' )
      uses: actions/github-script@v7
      with:
        result-encoding: string
        script: |
          core.summary
              .addHeading('Hashicorp Vagrant ${{ env.VAGRANT_PROVIDER }} image:', '4')
              .addLink('${{ vars.HCP_ORG }}/${{ env.VAGRANT_BOX_NAME }} (version:  ${{ env.RELEASE }}.${{ env.DATE_STAMP }})', 'https://portal.cloud.hashicorp.com/vagrant/discover/${{ vars.HCP_ORG }}/${{ env.VAGRANT_BOX_NAME }}/versions/${{ env.RELEASE }}.${{ env.DATE_STAMP }}')
              .write()
